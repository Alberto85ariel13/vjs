import { concat } from './concat';
import { copyWithin } from './copyWithin';
import { distinct } from './distinct';
import { every } from './every';
import { fill } from './fill';
import { filter } from './filter';
import { findIndex } from './findIndex';
import { find } from './find';
import { flat } from './flat';
import { forEach } from './forEach';
import { includes } from './includes';
import { join } from './join';
import { length } from './length';
import { map } from './map';
import { push } from './push';
import { reduce } from './reduce';
import { reduceRight } from './reduceRight';
import { reverse } from './reverse';
import { shift } from './shift';
import { slice } from './slice';
import { some } from './some';
import { sort } from './sort';
import { splitChunk } from './splitChunk';
import { top } from './top';
import { unshift } from './unshift';
import { groupByProp } from './groupByProp';
export declare const va: {
    concat: typeof concat;
    copyWithin: typeof copyWithin;
    distinct: typeof distinct;
    every: typeof every;
    fill: typeof fill;
    filter: typeof filter;
    findIndex: typeof findIndex;
    find: typeof find;
    flat: typeof flat;
    forEach: typeof forEach;
    includes: typeof includes;
    isArray: (val?: any) => boolean;
    join: typeof join;
    length: typeof length;
    map: typeof map;
    push: typeof push;
    reduce: typeof reduce;
    reduceRight: typeof reduceRight;
    removeEmpty: (...args: any[]) => any;
    removeNull: (arr?: any) => any;
    reverse: typeof reverse;
    shift: typeof shift;
    slice: typeof slice;
    some: typeof some;
    sort: typeof sort;
    splitChunk: typeof splitChunk;
    top: typeof top;
    unshift: typeof unshift;
    groupByProp: typeof groupByProp;
};
